{
	"info": {
		"_postman_id": "6a0c8d8a-1114-4ae9-ae09-f47e3024dfc2",
		"name": "TrackIt",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41733948"
	},
	"item": [
		{
			"name": "Criar Login",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"matheus\",\n    \"email\": \"naoseimeu@gmail.com\",\n    \"password\": \"senha123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/user/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"user",
						"register"
					]
				},
				"description": "This endpoint allows users to register by sending a POST request to the specified URL. The request should include the user's name, email, and password in the request body. Upon successful execution, the server will respond with a status code of 201 and a JSON object containing an access token, a message, and user details including the user's ID, name, email, and creation timestamp.\n\n### Request Body\n\n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `password` (string): The password for the user's account.\n    \n\n### Response\n\n- Status: 201\n    \n- Content-Type: application/json\n    \n- `access_token` (string): The access token for the registered user.\n    \n- `message` (string): A message from the server.\n    \n- `user` (object): An object containing user details including the user's ID, name, email, and creation timestamp.\n    \n    - `created_at` (string): The timestamp of user creation.\n        \n    - `email` (string): The email address of the user.\n        \n    - `id` (integer): The unique ID of the user.\n        \n    - `name` (string): The name of the user."
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verifica se a resposta foi bem-sucedida (status 200)\r",
							"if (pm.response.code === 200) {\r",
							"    // Extrai o token do JSON de resposta\r",
							"    const token = pm.response.json().access_token;\r",
							"    \r",
							"    // Salva o token em uma variável de ambiente\r",
							"    pm.environment.set(\"access_token\", token);\r",
							"    \r",
							"    // Opcional: Mostra uma mensagem no console (para debug)\r",
							"    console.log(\"Token salvo:\", token);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n         \"email\": \"naoseimeu@gmail.com\",\n         \"password\": \"senha123\"\n     }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/user/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"user",
						"login"
					]
				},
				"description": "### User Login\n\nThis endpoint is used to authenticate a user and obtain an access token for further API requests.\n\n#### Request Body\n\n- `email` (string): The email address of the user.\n    \n- `password` (string): The password of the user.\n    \n\n#### Response\n\nUpon successful authentication, the server responds with a status code of 200 and a JSON object containing:\n\n- `access_token` (string): The access token for the authenticated user.\n    \n- `user` (object): An object containing user details including:\n    \n    - `email` (string): The email address of the user.\n        \n    - `id` (integer): The unique identifier of the user.\n        \n    - `name` (string): The name of the user."
			},
			"response": []
		},
		{
			"name": "Update User",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0MzM3NjI2NCwianRpIjoiNDA4ZjczMjQtMmE3OS00OTg0LTg3MmQtODE2NmFjMTI1ZDdkIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6MSwibmJmIjoxNzQzMzc2MjY0LCJjc3JmIjoiYTc0ZDE0YTUtZGUzYy00ZTYxLTkwNmUtOWMwYmU4OWRlMDg2IiwiZXhwIjoxNzQzMzc5ODY0fQ.ZJM1b8p64ThBJF6-WZx26qYlNGv_bvTBn5xBTqNme4s"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"matheus teste automatizado\",\n    \"email\": \"matheus123@exemplo.com\",\n    \"password\": \"NovaSenha123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/user/update_user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"user",
						"update_user"
					]
				},
				"description": "### Update User\n\nThis endpoint is used to update user information.\n\n#### Request\n\n- _**Method**_: PUT\n    \n- _**Bearer Token**_: Get this token from the user/login endpoint.\n    \n- _**URL**_: `http://localhost:5000/api/user/update_user`\n    \n- _**Headers**_:  \n    Authorization: Bearer\n    \n- _**Body**_:\n    \n    - **name** (text, optional): The updated name of the user.\n        \n    - **email** (text, optional): The updated email of the user.\n        \n    - **password** (text, optional): The new password for the user.\n        \n- **Important Note**: If any of the fields are not provided, they will not be updated. At least one of the fields (name, email, or password) must be provided for the update to be performed.\n    \n\n#### Response\n\n- **200 OK**: The user was updated successfully.\n    \n- **400 Bad Request:** The request body is missing required fields or has invalid data.\n    \n- **401 Unauthorized:** Authentication failed (invalid or missing JWT token).\n    \n- **404 Not Found**: The user was not found in the database.\n    \n- **422 Unprocessable Entity:** Validation errors (e.g., email already in use).\n    \n\nThe response is in JSON format with the following schema:\n\n``` json\n{\n    \"error\": null,\n    \"message\": \"\"\n}\n\n ```\n\n- **error**: null if no error occurred, or an error message if an issue occurred.\n    \n- **message**: A description of the result (e.g., success or failure message)."
			},
			"response": []
		},
		{
			"name": "Delete User",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0MzM4NDc1NCwianRpIjoiMGZlYjE3YmYtN2E3MS00MjlhLWI5YzgtN2VkMTlmMDdhMDQ4IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6NCwibmJmIjoxNzQzMzg0NzU0LCJjc3JmIjoiYThmY2RkMjYtOGY4NS00NzU4LTg0Y2QtZDE1Mjk0Zjk4NmYyIiwiZXhwIjoxNzQzMzg4MzU0fQ.VKLRQEzq9jANObnH0w1I7Mzn8I-r_hACpYKSpR6PS6A"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"password\": \"senha123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/user/delete_user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"user",
						"delete_user"
					]
				},
				"description": "### DELETE /api/user/delete_user\n\nDeletes a user from the system.\n\n#### Request\n\n- Method: DELETE\n    \n- Bearer Token: Must include a valid JWT token in the request header.\n    \n- URL: `http://localhost:5000/api/user/delete_user`\n    \n- Headers:\n    \n    - Content-Type: application/json\n        \n    - Authorization: Bearer\n        \n- Body:\n    \n    - password (string, required): The password of the user to be deleted.\n        \n\n#### Response\n\n- 200 OK: Account successfully deleted.\n    \n- 400 Bad Request: Missing password to confirm deletion.\n    \n- 401 Unauthorized: Invalid credentials (incorrect password).\n    \n- 404 Not Found: User not found.\n    \n- 500 Internal Server Error: Failure to delete the account.\n    \n\nThe response is in JSON format with the following schema:\n\n``` json\n{\n  \"deleted_user\": {\n    \"id\": id_user,\n    \"name\": \"name_user\",\n    \"email\": \"mail_user@gmail.com\",\n    \"created_at\": \"2025-03-31T01:37:22.025487\"\n  },\n  \"message\": \"Conta excluída permanentemente\"\n}\n\n\n ```\n\nStartFragmentThis API ensures that only the user with the provided JWT token can delete their account after confirming their identity with their password.EndFragment"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "JWT",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc0MzM3NTcwNiwianRpIjoiNWM5ZDBjMDMtY2I1MC00MjBhLWJjM2UtMDEzNTg0ZDJkNjA0IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6MSwibmJmIjoxNzQzMzc1NzA2LCJjc3JmIjoiMzY0N2NhN2MtYTk0ZC00OTA1LTgwYzMtMGQ4OWE1NTU1NzcxIiwiZXhwIjoxNzQzMzc5MzA2fQ.CfBULFQ5kr0ql0ZengvGLtCHJS4ku8jDZ48XpU9f9M4",
			"type": "default"
		}
	]
}